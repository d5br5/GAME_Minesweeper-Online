// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id           Int            @id @default(autoincrement())
  userId       String         @unique
  password     String
  salt         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  favs         Fav[]
  voices       Voice[]
  refreshToken RefreshToken[]
}

model Shop {
  id      Int    @id @default(autoincrement())
  brand String
  name    String
  contact String
  address String
  url     String
  studio Boolean
  booth Boolean
  lat     Float
  lng     Float
  favs    Fav[]
}

model Fav {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId    Int

  @@index([userId])
}

model Voice {
  id         Int           @id @default(autoincrement())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  category   VoiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  status     VoiceStatus   @relation(fields: [statusId], references: [id], onDelete: Cascade)
  statusId   Int
}

model VoiceCategory {
  id       Int     @id @default(autoincrement())
  category String
  Voice    Voice[]
}

model VoiceStatus {
  id     Int     @id @default(autoincrement())
  status String
  voice  Voice[]
}

model RefreshToken {
  id         Int    @id @default(autoincrement())
  token      String @db.LongText
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  expiration BigInt
  clientIp   String
}
